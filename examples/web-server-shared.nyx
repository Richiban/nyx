module Shared

import nyx

type Counter = int

module Route =
  --  Defines how routes are generated on server and mapped from client
  def builder = { typeName, methodName ->
    "/api/{typeName}/{methodName}"
  }

type TodoId = int

type Todo = (
  id: TodoId --  auto-incremented
  description: string
  completed: bool
  dateAdded: Timestamp
)

def defaultTodo: Todo = (
  id          = 0 --  Id is auto-incremented because of the CLIMutable attribute
  description = ""
  completed   = false
  dateAdded   = Timestamp.Now
)

type TodoError = 
  | #todoDoesNotExist
  | #insertNotSuccessful
  | #updateNotSuccesful
  | #deleteNotSuccesful

type DeleteResult = 
  | #deleted 
  | #deleteError(TodoError)

type UpdateResult = 
  | #updated 
  | #updateError(TodoError)

type Description = #description(string)

-- A type that specifies the communication protocol for client and server
-- Every record field must have the type : 'a -> Async('b) where 'a can also be `unit`
-- Add more such fields, implement them on the server and they be directly available on client
type TodoProtocol =
  ( allTodos        : () -> Async(List(Todo))
    addTodo         : Description -> Async(Todo?)
    toggleCompleted : TodoId -> Async(UpdateResult)
    deleteTodo      : TodoId -> Async(DeleteResult) )