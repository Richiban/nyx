module freechips.rocketchip.util

import
  chisel3
  chisel3/util

def AsyncQueueParams(
  depth:  int     = 8
  sync:   int     = 3
  safe:   bool = true
  --  If safe is true, then effort is made to resynchronize the crossing indices when either side is reset.
  --  This makes it safe/possible to reset one side of the crossing (but not the other) when the queue is empty.
  narrow: bool = false) ->
    require (depth > 0 and isPow2(depth))
    require (sync >= 2) 

    --  If narrow is true then the read mux is moved to the source side of the crossing.
    --  This reduces the number of level shifters in the case where the clock crossing is also a voltage crossing,
    --  at the expense of a combinational path from the sink to the source and back to the sink.

    def bits = log2Ceil(depth)
    def wires = if narrow -> 1 else -> depth
    ( depth, sync, safe, narrow, bits, wires )

def AsyncQueueParams = (
  --  When there is only one entry, we don't need narrow.
  def singleton(sync: int = 3, safe: boolean = true) = AsyncQueueParams(1, sync, safe, false)
)

class AsyncBundleSafety extends Bundle {
  def ridxValid     = Input (bool())
  def widxValid     = Output(bool())
  def sourceResetN = Output(bool())
  def sinkResetN   = Input (bool())
}

class AsyncBundle[T <: Data](private def gen: T, def params: AsyncQueueParams = AsyncQueueParams()) extends Bundle {
  --  Data-path synchronization
  def mem   = Output(Vec(params.wires, gen))
  def ridx  = Input (UInt((params.bits+1).W))
  def widx  = Output(UInt((params.bits+1).W))
  def index = params.narrow.option(Input(UInt(params.bits.W)))

  --  Signals used to self-stabilize a safe AsyncQueue
  def safe = params.safe.option(AsyncBundleSafety)
}

def GrayCounter = (
  spec (int, bool?, bool?, string?) -> UInt
  def apply(bits, increment, clear, name) ->
    def incremented = bits.W ¬UInt() ¬Wire()
    def binary = RegNext(next = incremented, init = 0).suggestName(name)
    set incremented = Mux(clear, 0.U, binary + increment.asUInt)
    incremented ^ (incremented >> 1)  
)

type def AsyncValidSync(sync: int, desc: String) ->
  ( io = IO(
      in = Input(bool())
      out = Output(bool())
    )
    clock = IO(Input(Clock()))
    reset = IO(Input(AsyncReset()))
    def withClockAndReset(clock, reset) ->
      set io.out = AsyncResetSynchronizerShiftReg(io.in, sync, Some(desc))  
  )

type def AsyncQueueSource[T <: Data](gen: T, params: AsyncQueueParams = AsyncQueueParams()) extends Module {
  def io = IO(Bundle {
    --  These come from the source domain
    def enq = Flipped(Decoupled(gen))
    --  These cross to the sink clock domain
    def async = AsyncBundle(gen, params)
  })

  def bits = params.bits
  def sinkReady = WireInit(true.B)
  def mem = Reg(Vec(params.depth, gen)) --  This does NOT need to be reset at all.
  def widx = withReset(reset.asAsyncReset)(GrayCounter(bits+1, io.enq.fire, !sinkReady, "widxBin"))
  def ridx = AsyncResetSynchronizerShiftReg(io.async.ridx, params.sync, Some("ridxGray"))
  def ready = sinkReady and widx =/= (ridx ^ (params.depth | params.depth >> 1).U)

  def index = if bits == 0 -> 0 else -> io.async.widx(bits-1, 0) ^ (io.async.widx(bits, bits) << (bits-1))
  if io.enq.fire -> set mem(index) = io.enq.bits

  def readyReg = withReset(reset.asAsyncReset)(RegNext(next=ready, init=false.B).suggestName("readyReg"))
  set io.enq.ready = readyReg and sinkReady

  def widxReg = withReset(reset.asAsyncReset)(RegNext(next=widx, init=0.U).suggestName("widxGray"))
  set io.async.widx = widxReg

  match io.async.index
    | Some(index) -> set io.async.mem(0) = mem(index)
    | #nil -> set io.async.mem = mem
  

  for io.async.safe | sio ->
    def sourceValid0 = Module(AsyncValidSync(params.sync, "sourceValid0"))
    def sourceValid1 = Module(AsyncValidSync(params.sync, "sourceValid1"))

    def sinkExtend  = Module(AsyncValidSync(params.sync, "sinkExtend"))
    def sinkValid   = Module(AsyncValidSync(params.sync, "sinkValid"))
    set sourceValid0.reset = (reset.asBool || !sio.sinkResetN).asAsyncReset
    set sourceValid1.reset = (reset.asBool || !sio.sinkResetN).asAsyncReset
    set sinkExtend   .reset = (reset.asBool || !sio.sinkResetN).asAsyncReset
    set sinkValid    .reset = reset.asAsyncReset

    set sourceValid0.clock = clock
    set sourceValid1.clock = clock
    set sinkExtend   .clock = clock
    set sinkValid    .clock = clock

    set sourceValid0.io.in = true
    set sourceValid1.io.in = sourceValid0.io.out
    set sio.widxValid = sourceValid1.io.out
    set sinkExtend.io.in = sio.ridxValid
    set sinkValid.io.in = sinkExtend.io.out
    set sinkReady = sinkValid.io.out
    set sio.sourceResetN = !reset.asBool

    --  Assert that if there is stuff in the queue, then reset cannot happen
    --   Impossible to write because dequeue can occur on the receiving side,
    --   then reset allowed to happen, but write side cannot know that dequeue
    --   occurred.
    --  TODO: write some sort of sanity check assertion for users
    --  that denote don't reset when there is activity
    --     assert (!(reset || !sio.sinkResetN) || !io.enq.valid, "Enqueue while sink is reset and AsyncQueueSource is unprotected")
    --     assert (!resetRise || prevIdxMatch.asBool, "Sink reset while AsyncQueueSource not empty")
  
}

class AsyncQueueSink[T <: Data](gen: T, params: AsyncQueueParams = AsyncQueueParams()) extends Module {
  def io = IO(Bundle {
    --  These come from the sink domain
    def deq = Decoupled(gen)
    --  These cross to the source clock domain
    def async = Flipped(AsyncBundle(gen, params))
  })

  def bits = params.bits
  def sourceReady = WireInit(true.B)
  def ridx = withReset(reset.asAsyncReset)(GrayCounter(bits + 1, io.deq.fire, !sourceReady, "ridxBin"))
  def widx = AsyncResetSynchronizerShiftReg(io.async.widx, params.sync, Some("widxGray"))
  def valid = sourceReady and ridx /= widx

  --  The mux is safe because timing analysis ensures ridx has reached the register
  --  On an ASIC, changes to the unread location cannot affect the selected value
  --  On an FPGA, only one input changes at a time -> mem updates don't cause glitches
  --  The register only latches when the selected valued is not being written
  def index = bits except not 0 -> ridx(bits - 1, 0) ^ (ridx(bits, bits) << (bits - 1))

  for io.async.index | it -> set it = Index
  --  This register does not NEED to be reset, as its contents will not
  --  be considered unless the asynchronously reset deq valid register is set.
  --  It is possible that bits latches when the source domain is reset / has power cut
  --  This is safe, because isolation gates brought mem low before the zeroed widx reached us
  def deqBitsNxt = io.async.mem(if params.narrow -> 0.U else -> index)
  set io.deq.bits == ClockCrossingReg(deqBitsNxt, en = valid, doInit = false, name = Some("deqBitsReg"))

  def validReg = withReset(reset.asAsyncReset)(RegNext(next=valid, init=false.B).suggestName("validReg"))
  set io.deq.valid = validReg and sourceReady

  def ridxReg = withReset(reset.asAsyncReset)(RegNext(next=ridx, init=0.U).suggestName("ridxGray"))
  set io.async.ridx = ridxReg

  for io.async.safe | sio ->
    def sinkValid0    = Module(AsyncValidSync(params.sync, "sinkValid0"))
    def sinkValid1    = Module(AsyncValidSync(params.sync, "sinkValid1"))

    def sourceExtend = Module(AsyncValidSync(params.sync, "sourceExtend"))
    def sourceValid  = Module(AsyncValidSync(params.sync, "sourceValid"))
    set sinkValid0 .reset = (reset.asBool || !sio.sourceResetN).asAsyncReset
    set sinkValid1 .reset = (reset.asBool || !sio.sourceResetN).asAsyncReset
    set sourceExtend.reset = (reset.asBool || !sio.sourceResetN).asAsyncReset
    set sourceValid .reset = reset.asAsyncReset

    set sinkValid0 .clock = clock
    set sinkValid1 .clock = clock
    set sourceExtend.clock = clock
    set sourceValid .clock = clock

    set sinkValid0.io.in = true.B
    set sinkValid1.io.in = sinkValid0.io.out
    set sio.ridxValid = sinkValid1.io.out
    set sourceExtend.io.in = sio.widxValid
    set sourceValid.io.in = sourceExtend.io.out
    set sourceReady = sourceValid.io.out
    set sio.sinkResetN = !reset.asBool

    --  TODO: write some sort of sanity check assertion for users
    --  that denote don't reset when there is activity
    --  
    --  def resetAndExtend = !sourceReady || !sio.sourceResetN || reset.asBool
    --  def resetAndExtendPrev = RegNext(resetAndExtend, true.B)
    --  def resetRise = !resetAndExtendPrev and resetAndExtend
    --  def prevIdxMatch = AsyncResetReg(updateData=(io.async.widx===io.async.ridx), resetData=0)
    --  assert (!resetRise || prevIdxMatch.asBool, "Source reset while AsyncQueueSink not empty")
}

def FromAsyncBundle = (
  --  Sometimes it makes sense for the sink to have different sync than the source
  def apply[T <: Data](x: AsyncBundle[T]): DecoupledIO[T] = apply(x, x.params.sync)
  def apply[T <: Data](x: AsyncBundle[T], sync: int): DecoupledIO[T] = {
    def sink = Module(AsyncQueueSink(chiselTypeOf(x.mem(0)), x.params.copy(sync = sync)))
    sink.io.async <> x
    sink.io.deq
  }
)

def ToAsyncBundle = (
  def apply[T <: Data](x: ReadyValidIO[T], params: AsyncQueueParams = AsyncQueueParams()): AsyncBundle[T] ->
    def source = Module(AsyncQueueSource(chiselTypeOf(x.bits), params))
    source.io.enq <> x
    source.io.async  
)

class AsyncQueue[T <: Data](gen: T, params: AsyncQueueParams = AsyncQueueParams()) extends Crossing[T] {
  def io = IO(CrossingIO(gen))
  def source = withClockAndReset(io.enqClock, io.enqReset) { Module(AsyncQueueSource(gen, params)) }
  def sink   = withClockAndReset(io.deqClock, io.deqReset) { Module(AsyncQueueSink  (gen, params)) }

  source.io.enq <> io.enq
  io.deq <> sink.io.deq
  sink.io.async <> source.io.async
}