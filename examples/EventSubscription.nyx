type HighstormEvent = (
  time?     : number
  event     : string
  content?  : string
  metadata? : Lookup(string, #some(string) | #nil)
)

type HighstormOptions = (
  baseUrl?: string
  token   : string
)

type def Highstorm(opts: HighstormOptions) ->
  def token = opts.token
  def baseUrl = opts.baseUrl ?? "https://highstorm.app"

  (
    baseUrl = baseUrl

    ingest: string, HighstormEvent, (throwOnError?: bool) -> Async(id: string?) 
      = async { channel, event, opts? ->
        def res = await fetch("{this.baseUrl}/api/v1/events/{channel}", (
          method = "POST"
          headers = [
            "Content-Type" => "application/json"
            "Authorization" => "Bearer $(this.token)"
          ],
          body = toJson(event)
        ))

        if !res.ok ->
          return Err("Unable to ingest event: {await res.text()}")
        
        return await res.json()
      } except #err(err) ->
        console.error(err)

        if opts?.throwOnError == true -> Err(err)
        else -> (id = null)   
  ) 