---
Loops
=====

Loops are an important concept in Nyx, as they are in most programming languages.

Like many other languages, Nyx uses the `for` keyword to denote a loop. The syntax
is slightly different in that the collection / iterable to loop over comes first; this
brings a number of advantages:
* more natural readability
* it allowins the compiler/editor to infer the nature of the loop variables
* it allows for the normal pattern matching features to be used on the loop variable


---

--	A simple n-times loop, without a variable
for 1..5 -> print("Hello")

--  A simple n-times loop, with a variable
for 1..5 | i -> print("Hello times {i}")

--  The syntax allows for immediate pattern matching on the loop variable:
for 1..5 | < 5 -> println("Ready...")
         | _   -> println("Go!")

def data = [1, 2, 3]

--	Straightforward 'foreach' loop
for data | item -> println(item)

---
Behind the scenes for-loops are compiled into function calls. The variables that
can be declared are defined by the function being called. For example -> the type
<list> has a method "for" that takes a function that takes *two* parameters.
This means that the following are possible:

---

-- A common ask in many languages is to be able to enumerator the items in a 
-- collection whilst also keeping track of a counter. This is possible in Nyx
-- with a very short syntax, making use of the fact that a tuple of two (or
-- more) iterables can be enumerated together, in way that's effectively the 
-- same as zipping:
def data = ["one", "two", "three"]
for data, 0.. | item, i ->
    print "Item number {i} is {item}"
    -- The above achieves the "counter" loop functionality by zipping the target
    -- collection together with a range of numbers from 0 to infinity. The loop
    -- is not infinite, however, because the loop will stop when _either_ of the 
    -- two iterables runs out of items.

-- If you prefer using functions, the above code is exactly equivalent to the following:
data -iteri { item, i ->  print "Item number {i} is {item}" }

--	When looping over a dictionary, the loop variable is a tuple of the key and the value.
--  Since the loop construct allows for immediate pattern matching of the loop variable it
--  can be deconstructed:
def data = map { "one" => "uno"; "two" => "dos"; "three" => "tres" }

for dict | key, value -> print "{key} => {value}"

--	The above code is equivalent to the following functional style:
data -iter { key, value ->  print "{key} => {value}" }

---
If you want to ignore one of the variables available to you in the loop you can
    either -> simply omit the variable (if the variable you're omitting is at the end
    of the list of available variables) or use the wildcard '_' in its place. E.g.

---

for dict | _, value -> 
    print "I only care about {value} in this dictionary"

--	Note that, | with almost any statement in Nyx, a for loop is also an expression.
--  This means that is can be used on the RHS of an assignment by 'selecting' a value.
--  This brings us on to: