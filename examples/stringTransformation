def tests = [
    "oneTwoThree"
    "one_two_three"
    "one-two-three"
    "one two three"
]

spec string -> list(string)
def splitWords(input):
    input
    \ split(RegEx("(?=[A-Z])|_|-|\s"))

spec (list(string), #camel | #pascal | #kebab | #snake | #title | #sentence | #mid | #mid_sentence) -> string
def rejoin(words, casing):
    casing
    \ case #kebab:
        words \ map { toLowerCase() } \ join('-')
      case #snake:
        words \ map { toLowerCase() } \ join('_')
      case #pascal:
        words 
        \ map { replace(RegEx("(^\w|\s\w)(\S*)", #global), { _, m1, m2: m1.toUpperCase() + m2.toLowerCase() }) } 
        \ join("")
      case #camel:
        mut first = true
        def newWords = MutList[]

        for words as word:
            if first:
                newWords += word.toLowerCase()
                set first = false
                continue

            newWords += word.replace(RegEx("(^\w|\s\w)(\S*)", #global), { _, m1, m2: m1.toUpperCase() + m2.toLowerCase() })

        newWords.join('')
      case #title:
        words 
        \ map { 
          replace(
            RegEx("(^\w|\s\w)(\S*)", #global), 
            { _, m1, m2: m1.toUpperCase() + m2.toLowerCase() }
            ) 
          } 
        \ join(" ")
      case #sentence:
        mut first = true
        def newWords = MutList[]

        for words as word:
            if first:
                newWords += word.replace(
                  RegEx("(^\w|\s\w)(\S*)", #global), 
                  { _, m1, m2: m1.toUpperCase() + m2.toLowerCase() }
                )
                set first = false
                continue

            newWords += word.toLowerCase()

        newWords \ join(' ')
      case #mid_sentence:
        words \ map { toLowerCase() } \ join(' ')

for tests as test:
    def words = splitWords(test)
    def rejoined = rejoin(words, #mid_sentence)

    console.log(rejoined)