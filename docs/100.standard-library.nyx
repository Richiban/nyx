---
Standard library 
======

# Main abstractions (traits)

Seq(t) 					    --  Equivalent to .NET's IEnumerable<T>. May or may not be infinite, may or may not be in memory
└ Collection(t) 			--  An in-memory collection of `t`s. Finite in size
  ├ List(t)					--  A collection of `t`s that supports random access by index
  ├ Series(t) 				--  A linear collection in memory. Getting an element by index usually requires walking through the collection
  ├ Set(t) 					--  An unordered collection of `t`s that supports fast addition and 'contains' checking
  │ └ SortedSet(t) 			--  A sorted collection of `t`s that supports fast addition and 'contains' checking
  ├ Map(k, v) 				--  A collection of `v` values stored against a key `k`. Each `k` has a single value `v`
  │ └ BiMap(a, b) 		    --  A collection of `(a, b)` value pairs that supports lookup in both directions
  └ Lookup(k, v) 			--  A collection of `v` values stored against a key `k`. Multiple values may exist for each `k`

# Async collections

Stream
├ ASYNCGENERATOR(t)	
└ AsyncCollection(t) 			



Array(t): List(t)
            ├ Map(int, t)
            │  └ Collection((int, t))
            │     └ Source((int, t))
            └ Collection(t)
               └ Source(t)



Dictionary(key, value): Map(key, value)
                            └ Collection((key, value))
                                └ Sequence((key, value))


Promise(t)
├ Async(t)
├ Lazy(t)
├ Ref(t)


--	Abstractions


type Source(a) =
  ( getEnumerator: () -> Enumerator(a) )

type Collection(a) =
  Sequence(a) & ( count: int )

type Map(key, value) =
  Collection(a) & ( get: key -> value )

type List(a) =
  Map(int, a) & Collection(a)

---
--	Implementations
type LinkedList(a) =
  () | (a, LinkedList(a))
  & Sequence(a)

def LinkedList(a).getEnumerator() ->
  seq { 
    mut current = this

    while this is (head, tail) ->
      yield head
      set current = tail
  }

type NonEmptyLinkedList(a) =
  a | (a, NonEmptyLinkedList(a))
  & NonEmptySequence(a)

def NonEmptyLinkedList(a).head
  | (head, _) | head -> head

def getEnumerator() -> seq {
  mut current = this

  for .. ->
    yield current.head

    if current is (head, tail) ->
      set current = tail
    else ->
      return
} 


--	Most of the collection types, as well as sequence, provide a non-empty variant. This is because
--	many aggregate functions over a sequence will fail if the sequence yields no elements. A non-empty
--	series of types provides safety from this.


--  -- Standard library --


type MapBuilder = (
    (->): (k, v) -> ()
)

type Map = ...
    
def Map.apply(block: [MapBuilder]() -> ()) ->
  def map = HashMap()

  context(def (->)(k, v) -> map.add(k, v)) ->
    block()

  map

def myMap = Map {
    "hello" -> "world"
    "foo" -> "bar"
}


type Option(a) = (#some, a) | #nil 

spec (a -> b) -> Option(b)
def Option(a).map(f) -> this
      | #some, val -> (#some, f(val))
      | #nil -> #nil
      
def Option(a).force(): a -> this
      | #some, val -> val
      | #nil -> throw InvalidOperationException()

type Error(err) = (#error, err)
    spec (err -> a) -> Error(a)
    def map(f) -> this
          | #error, err -> (#error, f(err))

type Ok(result) = (#ok, result)
    spec (result -> a) -> Ok(a)
    def map(f) -> this
          | #ok, val -> (#ok, f(val))

type Result(success, err) = Ok(success) | Error(err)
    spec () -> Option(success)
    def toOption() -> this
          | #ok, val -> (#some, val)
          | _ -> #nil

    spec (err -> a) -> Result(success, a)
    def mapErr(f) -> this
          | #ok, val -> #ok(val)
          | error -> error

    spec (success -> a) -> Result(a, err)
    def mapOk(f) -> this
          | #ok, val -> #ok(f(val))
          | #error, err -> #error(err)
