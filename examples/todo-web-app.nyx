module WebApp

import 
  shared
  system/io
  liteDb
  liteDb/nyx
  liteDb/nyx/extensions

def createUsing: LiteDatabase -> ITodoProtocol = { db ->

  def todos = db.getCollection("todos"): List(Todo)

  TodoProtocol(
    allTodos = {
      todos.findAll()
          \List.ofSeq
          \toAsync
      }

    addTodo = { text ->
      todos.insert(defaultTodo() with description = text)
        \todos.tryFindById
        \toAsync
    }

    toggleCompleted = { id ->
      def todoId = BsonValue(id)

      match todos.tryFindById(todoId)
      | #notFound -> updateError(#todoDoesNotExist)
      | #some(existingTodo) ->
        def updatedTodo = (existingTodo with completed = !existingTodo.completed)
        if todos.update(todoId, updatedTodo) -> Updated 
        else -> UpdateError(#updateNotSuccesful)
      \toAsync

      def deleteTodo(id) -> 
        def todoId = BsonValue(id)

        match todos.tryFindById(todoId) 
        | #notFound -> DeleteError(#todoDoesNotExist)
        | #some(_) ->
          match todos.delete(todoId) 
          | true -> #deleted
          | false -> DeleteError(#deleteNotSuccesful)
        \toAsync
    }
  )
}


def createUsingInMemoryStorage: () -> ITodoProtocol = {
  --  In-memory collection
  def memoryStream = MemoryStream()
  def bsonMapper = NyxBsonMapper()
  def inMemoryDatabase = LiteDatabase(memoryStream, bsonMapper)
  createUsing(inMemoryDatabase)
}

def seedIntitialData: ITodoProtocol -> () = { todos -> 
  list(
    "Learn F#"
    "Learn Fable"
    "Build Awesome Apps!" )
  \map (Description >> todos.addTodo)
  \Async.parallel
  \Async.runSynchronously
  \ignore
}