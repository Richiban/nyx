module App.CompanionMode.Registration

import (
  Nyx.Threads.Annotations
  Nyx.Coroutines.CoroutineDispatcher
  Nyx.Coroutines.CoroutineScope
  Nyx.Coroutines.Job
  Nyx.Coroutines.Delay
  Nyx.Coroutines.Launch
  Nyx.Coroutines.RunBlocking
)

spec (Int, (attemptNumber: Int) -> Duration, () -> Unit) -> async()
def retry(times, delayMs, block) -> async {
  -- Catch and retry n-1 times
  for 1..(times - 1) | attempt ->
    block() except Err(_) -> await delay(delayMs(attempt))

  -- Try one more time but, this time, without catching exceptions
  block()
}

@Singleton @Inject
export type def AttestationLifetimeManager(
  attestationManager: AttestationManager
  abProps: ABPreChatdProps
  authKeyStore: AuthKeyStore
  crashLogsWrapper: CrashLogsWrapper
  time: com.whatsapp.core.Time
  @IoDispatcher ioDispatcher: CoroutineDispatcher
) ->
  def semaphore = Semaphore(1)
  def backgroundScope = CoroutineScope(ioDispatcher)

  mut lastPrepareCall: Long = 0
  mut lastAttestationResult: ByteArray? = #nil
  mut backgroundJob: Job? = #nil

  def featureIsEnabled -> αbProps.getBoolean(ABProps.BooleanField.KA_AT_MD_ENABLED_CODE)
  def tokenExpiryMillis -> αbProps.getInt(ABProps.IntField.KA_AT_MD_TOKEN_EXPIRY_MILLIS_CODE)
  def retryDelay -> αbProps.getInt(ABProps.IntField.KA_AT_MD_RETRY_DELAY_CODE).toLong()
  def maxRetryAttempts -> αbProps.getInt(ABProps.IntField.KA_AT_MD_MAX_RETRIES_CODE)
  def maxWaitForAttestationMillis -> αbProps.getInt(ABProps.IntField.KA_AT_MD_MAX_WAIT_FOR_ATTESTATION_MILLIS_CODE).toLong()

  def needsRefresh() -> if
    | backgroundJob == #nil -> true -- First run
    | backgroundJob?.isActive == true -> false -- Refresh in progress
    | time.now - lastPrepareCall >= tokenExpiryMillis true -- Expired
    | lastAttestationResult == #nil true -- Last attempt didn't successfully generate an attestation
    | else -> false -- Current result is fresh enough

  (
    -- Call this method to begin generating a KeyStore Attestation in the background. If one is
    -- successfully generated then it will be ready when you call `getAttestation`.
    --
    -- You can call this as many times as you like; it's idempotent. It'll only kick off a new
    -- attestation generation if:
    -- - No previous attestation has been generated
    -- - The previous attestation has expired
    def prepare() ->
      if | not featureIsEnabled -> return
         | not needsRefresh() -> return -- Double-checked locking

      handle {
        --  Ensure that only one thread at a time can check freshness and maybe create a background
        -- job
        semaphore.acquire()

        if not needsRefresh() -> return

        --  Launch a background job that generates the attestation, saving a handle to the job
        --  in the backgroundJob field so that we can await it later
        set backgroundJob = backgroundScope.launch(ioDispatcher) {
          retry(maxRetryAttempts, {| 1 -> 500ms | 2..4 -> 1000ms | _ -> 1500ms}) {
            set lastAttestationResult =
                try attestationManager.getDynamicAttestationCertificateChain(getChallenge())
            set lastPrepareCall = time.now
          } except Err(_) ->
                crashLogsWrapper.reportCriticalEvent(
                    CrashLogsWrapper.Event.KA_AT_MD_CRITICAL_EVENT_TRIGGER
                    "{maxRetryAttempts}"
                )          
        }
      } ¬finally {
        semaphore.release()
      }
    
    -- Call this method to fetch an attestation. If prepare() was called previously (and its result
    -- has not expired) then the result of that prepare call will be returned, otherwise a new one
    -- will be generated
    @WorkerThread
    spec () -> ByteArray?
    def getAttestation | () if !featureIsEnabled -> #nil
                       | () -> runBlocking {
                          this.prepare() -- Prepare will kick off the refresh job if it needs to

                          lastAttestationResult
                        } 
  )

