---
Modules
=======

A module is a namespace. By default, the module will be based on the path + file name relative to the compilation root.
i.e. if the compilation root is in `/src/myproject/` then the file `/src/myproject/function/mod_a.nyx` will have an
implicit module name of `function/mod_a`.

The module name can be overridden with a module declaration at the top of the file
---

module myModuleName

--  In a module definitions are "internal" to the module (they cannot be seen outside it) unless they are explicitly exported:

module myModule

def greeting = "Hello world" --  internal

export def greet() -> greeting --  Exported, and now visible to other code that imports this module

--  It is highly recommended (compiler warning) that exported definitions have a spec (or are otherwise explicitly typed)
--  If desired, you can escape this by giving a value the type of `_` in its spec, which is how you explicitly tell the compiler
--  that you want it to infer a type.

module MyModule

export def x = 5 --  Compiler warning: Exported definitions should have an attached spec

--  Modules can also be declared (possibly multiply) in the middle of a file with a module block.
--  The name of the block module will be appended to the name of the containing module
--  Unlike namespaces in object-oriented languages, a module can directly hold values.

module MyModule 

module Functions -> --  Full name is MyModule/Functions
  export def f(x) -> x * 2

  export def g(x) -> x ** 2

  export def i = 0


type Point = (x: number, y: number)

def origin(Point) = Point (x = 0, y = 0)
def length -> this this.sqrt(.x ** 2 + this.y ** 2)


default Default(Point) = (
  default = Point.origin
)

--  -- Importing modules --

--  Modules can be imported with the `import` keyword, followed by the name of the module. E.g.

import math

--  When importing multiple modules on consecutive lines, it _can_ be written as 

import math
import io

--  But an import block is preferred
import ->
    math
    io

--  Imports can be given a local name to avoid name conflicts:
import io/file as f

--  This means that the contents of the `file` module are not available in scope, but instead through the given name `f`
def myFile = f.open("/somefile.txt")

--  Importing can be done anywhere in a file, allowing the use of imports inside scopes to limit naming conflicts
def myFunction() ->
    import io/file

    file.open("/somefile.txt")


