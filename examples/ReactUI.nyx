import
  OkrTypes
  WAAdminAccountInfo (AccountInfo)
  WAAdminAsyncData (TAsyncQueryParams)
  WAAdminStore (Dispatch, Store)
  WAAdminWithAsyncData.react (AsyncDatas)
  WAAdminActionsRedux (doAction)
  WAAdminAsyncActionButton.react (WAAdminAsyncActionButton)
  WAAdminAsyncDataRedux (asyncDataFetch)
  WAAdminButton.react (buttonStyles)
  WAAdminConstants (BKG_COLOR_WATCHED, CAPTION_COLOR_BLUE, CAPTION_COLOR_YELLOW, PERMISSIONS) 
  WAAdminExpandableModule.react (WAAdminExpandableModule)
  WAAdminSection.react (WAAdminProtectedSection)
  WAAdminSectionRow.react (WAAdminSectionRow)
  WAAdminUserInfoUtils (buildAccountInfoFetchParams)
  WAAdminWithAsyncData.react (connectWithAsyncData)  
  NyxML

def widget_title = "Parole info"
def description_of_parole =
  "Parole is a state we put users of spammy UCs into to try to force them to move onto the official client"

type OwnProps = (
  user: string
  accountInfo: AccountInfo?
  aclMemberList?: Array(string)
)

type StateProps = (
  isOnParole?: ?boolean
)

spec ((), OwnProps) -> Array(TAsyncQueryParams)
def mapStateToAsyncParams(_rootStore, ownProps) ->
  def (user) = ownProps
  [buildAccountInfoFetchParams(user)]

spec (Store, OwnProps, AsyncDatas) -> StateProps
def mapStateWithAsyncToProps(globalStore, ownProps, asyncDatas) ->
  def (data, progress) = asyncDatas(0)

  ( accountInfo = (data = data)
    progress = progress
  )

spec (Dispatch, OwnProps) -> Dispatch
def mapDispatchWithAsyncToProps(dispatch, ownProps) ->
  ( dispatch
    asyncAction = { action, params, options ->
      dispatch(doAction(action, params, options))
    }
    refetch = {
      dispatch(asyncDataFetch(buildAccountInfoFetchParams(ownProps.user)))
    }
  )

spec (OwnProps) -> bool?
def isOnParole(props) ->
  props?.accountInfo?.userInfo?.sigmaProperties?.includes("OnParole")

spec (OwnProps) -> string?
def getLastEventText(props) ->
  props?.accountInfo?.userInfo?.sigmaMisc?.regProperties?.paroleLastEvent

type RenderProps = (
  buttonAction: string
  buttonBackground: string?
  buttonStyle: string
  buttonText: string
  headingColour: string
  isOnParoleText: string
  lastEventText: string?
  showLastEvent: boolean
)

spec (OwnProps, bool) -> RenderProps
def getRenderProps 
  | (props, true) ->
    ( buttonStyle = buttonStyles.warning
      buttonText = "Lift parole"
      buttonAction = "lift_parole"
      isOnParoleText = "Yes"
      headingColour = CAPTION_COLOR_YELLOW
      buttonBackground = BKG_COLOR_WATCHED
      lastEventText = getLastEventText(props)
      showLastEvent = true
    )
  | (props, false) ->
    ( buttonStyle = buttonStyles.danger
      buttonText = "Enroll in parole"
      buttonAction = "enroll_parole"
      isOnParoleText = "No"
      headingColour = CAPTION_COLOR_BLUE
      buttonBackground = #nil
      lastEventText = #nil
      showLastEvent = false
    )

spec () -> React.PureComponent<OwnProps, StateProps>
export def WAAdminParoleInfo() ->
  def state: StateProps = (isOnParole = isOnParole(this.props))

  ( def render(): NyxML.Node ->
      def isOnParole = this.state.isOnParole == true
      def renderProps = getRenderProps(this.props, isOnParole)

      def flipParoleState() ->
        this.setState(isOnParole = !isOnParole)

      WAAdminProtectedSection {
        set aclMemberList = aclMemberList
        set captionColor = BKG_COLOR_WATCHED
        set permission = PERMISSIONS.viewSection$$accountDefenceSummary
        set stripNumber = user

        WAAdminExpandableModule {
          set captionColor = renderProps.headingColour
          set isDefaultExpanded = true
          set title = widget_title
          set tooltipInfo = descriptionOfParole

          WAAdminSectionRow {
            b { "Is on parole" }
            renderProps.isOnParoleText
          }

          if renderProps.showLastEvent is Ok(lastEventText) ->
            WAAdminSectionRow {
              b { "Last parole event" }
              lastEventText
            }

          WAAdminSectionRow {
            set bgColor = renderProps.buttonBackground
            set label = "Parole Actions"

            b { "Parole actions" }
            
            WAAdminAsyncActionButton {
              set action = renderProps.buttonAction
              set bsStyle = renderProps.buttonStyle
              set enrolled = isOnParole
              set params = user
              set onSuccess = flipParoleState

              {renderProps.buttonText}
            }
          }
        }
      }
  )

def {Component: WAAdminSpamInfoWithAsyncData} = ((connectWithAsyncData(
  WAAdminParoleInfo,
  mapStateToAsyncParams,
  mapStateWithAsyncToProps,
  mapDispatchWithAsyncToProps,
): IntentionallyAny): {Component: Class<React.Component<OwnProps>>, ...})

export {WAAdminSpamInfoWithAsyncData as WAAdminParoleInfo}
