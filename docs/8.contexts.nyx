---
Contexts
========

Another crucial feature of Nyx that isn't found in many languages is that of a 'context'

A context is, in a way, an implicit parameter to a function; 
when a function specifies a context that it runs in, all the members of that context are available to it.

A context can be used for effect-oriented programming

A function without any contexts is known to be total (i.e. has no side effects and is referentially transparent)
because stateful mutations or IO require a context.

---

def f() ->
  println("Hello, world!") --  Error: Function `println` is not defined. Did you mean to use the `Console` context?

def[Console] g() ->
  println("Hello, world!") --  OK

--  This means Nyx programs follow the "functional core, imperative shell" paradigm


context Console ->
  def println(s: String) -> ...


--  Mutation is controlled by the fact that modules cannot directly contain mutable variables; they must be wrapped in a context


context MyState ->
  mut x = 0

  def getX() -> x
  def setX(newX: int) -> set x = newX

---
The `main` method of any program automatically runs in the `Console` context, giving it access to 
functions such as `println` and `readLine`

---


---
# Using contexts for typeclasses

Imagine we have a list of points that we wish to sum:

---

type Point = (x: int, y: int)

def points = Point
 [| x | y |
  | 1 | 2 |
  | 3 | 4 |
  | 5 | 6 |]

---
We can define a typeclass for types that can be summed; i.e. any type for which there is a zero value and a + method

---

type Summable(a) = (
  zero: a
  `+`: (a, a) -> a
)

---
And then use this function that uses the Summable context to sum a list of items without
having to explicitly pass in the zero and + functions

---

spec [Summable(a)](list(a)) -> a
def sum(items) -> items -fold(`0`) { + }

---
We could explicitly define an instance of the Summable typeclass for Point:

  def PointSum: Summable(Point) = 
    ( zero = Point(x: 0, y: 0)
      `+`(a, b) = Point(x: a.x + b.x, y: a.y + b.y)
    )

but we don't need to; by defining `+` and `0` on Point itself, they are defined in the 
global context and therefore an instance of Summable(Point) can automatically 
by synthesized.

---

def Point.+(a, b) = Point(x: a.x + b.x, y: a.y + b.y)

def Point.`0` = Point(x: 0, y: 0)

---
Now the following method call just works

---

def r = points -sum()

---
If we want to supply custom behaviour, we can define an instance of Summable(Point) 
and use it explicitly

---

def PointSum = Summable(Point)(
  zero = Point(x: 0, y: 0)
  `+`(a, b) = Point(x: a.x + b.x, y: a.y + b.y)
)

def r = points -sum[PointSum]()


spec [CurrencyConversionTable] (Pounds, Dollars) -> Dollars
def addPoundsAndDollars(p, d) ->
  convert(p, #dollars) + d -- `convert` is a function on the `CurrencyConversionTable` context

--  This is how effect control is done in Nyx

--  All console programs implicitly run in ConsoleContext, giving access to things like `print` and `readline`
def main() ->
  sayHello()

--  Functions can be annotated with a context. The functions on that context are now available to call within that function, and functions
--  that in turn require that context can be called
spec [ConsoleContext] () -> ()
def sayHello() ->
  println("Hello world!")


--  Contexts can be combined. For example, the following function requires a context that has both `ConsoleContext` and `FileSystemContext`:
spec [ConsoleContext, FileSystemContext] (string) -> ()
def readAndPrintFile(filename) ->
  def contents = openFile(filename).contents

  print(contents)



--  Contexts also allow for Haskell-style typeclasses. For example, the following context allows any type to be converted to a string:

type Writeable(a) = (
  write: a -> string
)

type Person = (
  name: string
  age: int
)

default Writeable(Person) ->
  --  Note that the spec is inferred from the trait and doesn't need to be written again
  def write(p) -> "{p.name} is {p.age} years old"


spec [Writeable(a), ConsoleContext] a -> string
def someFunction(x) ->
  println(write(x)) --  Since we're in the context of Writeable(a), the function `write` is in scope


--  When in a function body, in order to call another function that requires a context, you have two options (let's say you're
--  in function `f` and you want to call function `g`):
--	    a) add the context to your function's signature, therefore passing the need to create a context on to your caller
--	    b) create a context yourself, start a context block, and then call `g` within that block
--      c) import an `impl` that gives you the context that you need

type MyContext = (
  m: string -> ()
)

def g[MyContext]() -> 
m("Hello world") -- `m` is in scope from context `MyContext`


def f() ->
  g() --  Error: `g` requires `MyContext` in the context

def f[MyContext]() -> 
  g() --  This works because we have added the context to `f`'s signature, passing the need to create a context on to our caller

def f() ->
def c: MyContext = ( def m(s) -> println(s) )

context(c) ->
  g() --  This works because we have created an instance of the necessary context and started a context block

def f() ->
import aModule/containingAnImplOf/MyContext --  This works because we have imported an default that gives us the context we need

g()