---
Ranges
======

---

--  Ranges in Nyx use the x..y syntax, which we have already seen in the section on for-loops:

for 1..5 | i -> println("Hello times {i}")


--  Ranges are a type of sequence, and can be used in some of the same ways as lists or dictionaries.
--  Note that one of the main differences between ranges and lists is that ranges are lazy, meaning
--  that they are not evaluated until they are iterated over. This means that ranges can be infinite:

def naturalNumbers = 0..

--  Note that writing an unbounded range, as above, results in a slightly different type to a bounded range:

def naturalNumbers = 0..	--  naturalNumbers: seq(int)
def oneToTen = 1..10    --  oneToTen: series(int)

--  Any type can be used in a range, provided it supports `succ` and `>=` operators. For example:

def aToZ = 'a'..'z'	--  aToZ: series(char), because succ('b') == 'c' and 'z' >= 'a'


type Point = (x: int, y: int)

def Point.succ(p: Point) -> Point(p.x + 1, p.y + 1)
def Point.magnitude(p: Point) -> Math.sqrt(p.x ^ 2 + p.y ^ 2)
def Point.`<=`(p1: Point, p2: Point) -> magnitude(p1) <= magnitude(p2)

def p1 = Point(1, 1)
def p2 = Point(8, 8)

def points = p1..p2	--  This is now legal `points: series(Point)`

-- If we want to see what the `..` operator is doing, we can write a function to generate it ourselves:


def range 
  : [(succ: (α) -> α, `<=`: (a, a) -> bool)] (start: a, end: a) -> series(α)
  = { | start, end where end < start ->
        series {}
      | (start, end) ->
        mut current = start

        series {
          while current <= end ->
            yield current
            set current = succ(current)
      }
  }

---
In the standard library you might find these types defined:

---

type Range[Ord(n)](n) = 
  | #closedRange(leftLimit: n, rightLimit: n)
  | #leftOpenRange(rightLimit: n)
  | #rightOpenRange(leftLimit: n)
  | #openRange

-- The `Enum` typeclass is used for types that have predecessors and successors — i.e., enumerable 
-- or discrete types. It provides functions for:
-- * Getting the successor: succ
-- * Getting the predecessor: pred
-- * Converting to/from Int: fromEnum and toEnum
-- * Generating ranges: [x..y] desugars to enumFromTo x y

type StepRange[Enum(n)] =
  | #closedRange(leftLimit: n, rightLimit: n)
  | #rightOpenRange(leftLimit: n) 

def iterate
  : [Enum(n)] (StepRange(n)) -> Iter(n)
  = { r ->
    def left, right = 
      match r
      | l, r -> (l, #some(r))
      | l    -> (l, #nil)

    seq {
      mut current = left

      while current < right ->
        yield current

        set current = succ(current)
    }
  }


def Range.contains
  : [Ord(n)] n, Range(n) -> bool
  = { testVal, range ->
    match range
    | #closedRange(leftLimit, rightLimit) -> testVal <= rightLimit and testVal >= leftLimit
    | #leftOpenRange(rightLimit)          -> testVal <= rightLimit
    | #rightOpenRange(leftLimit)          -> testVal <= leftLimit
    | #openRange()                        -> true
  }

-- There's syntax support for ranges using the .. operator

def getLogs 
  : Range(Moment)
  = { timespan ->
    logs \filter { log -> timespan \contains(log.timestamp) }
  }

def myLogs = getLogs((Moment.today)..)