---
Workflows
=========

Workflows are one of Nyx's more unique, and most powerful, features.

They allow the language to be extended with library functions in a way that feels like a language feature.
They are similar to computation expressions in F# and similar to (but like more powerful than) Builders from Kotlin

Workflows can be used for, among other things:
  * Creating a domain-specific language (DSL)
  * Async-await / coroutines / channels
  * Error/Option chaining
  * Linq-style queries

A builder is used by applying a builder value with a lambda, similar to any other higher-order function:

---

someBuilder {
  --  Some code
}

---
 What makes a builder different from other higher-order functions is that extra language constructs are available
to use inside the lambda, if the builder supports them.

For example, `seq` is in the standard library and is an instance of the SequenceBuilder type.
`SequenceBuilder` has implemented support for `yield`, so this becomes valid:

---

seq {
  yield "hello"
  yield "world"
}

--  Note that, while `yield` is included here for learning purposes, it's not actually required and the above is 
--  equivalent to:

seq {
  "hello"
  "world"
}

--  This desugars to:

seq.apply({ builder ->
  builder.yield("hello")
  builder.yield("world")
})

--  Builders are the preferred syntax for initialising things like maps:
def someMap =
  map {
    yield (1, "one")
    yield (2, "two")
  }

--  Note: the map builder in the standard library uses the contexts feature to provide the `=>` operator inside the builder lambda,
--  making the preferred form:
def someMap = map {
  1 => "one"
  2 => "two"
}

--  Builders are also how async/await is implemented in the standard library. `async` is the instance of the builder
--  and `await` is a custom keyword for the `bind` method

def async = (
  @customKeywordType(#bind)
  def await(m, f) ->
      ...
)

def greetingAsync =
  async {
    def name = await getName()

    return "Hello, {name}"
  }

--  Which is rewritten to:
def greetingAsync =
  async.apply({ builder ->
    builder.await(getName(), { name ->
        builder.return("Hello, {name}")
    })
  })

--  It's also possible to write a function that executes in the context of the workflow
--  you want to use, although it's normally recommended to use the helper functions
def greetingAsync: [AsyncWorkflow] = {
  def name = await getName()

  return "Hello, {name}"
}

--  The AsyncWorkflow in the standard library provides support for `await`, `use` and `try` keywords:

spec Async(Result(Customer, #customerNotFound))
def asyncCustomerName = async { 
  def dbConnection = use getDbConnection()
  def customer = try await getCustomer(5)

  return customer.name
}

---
# Async

The AsyncWorkflow context type provides an `await` keyword

---

type Movie = (name: string, yearOfRelease: int)

def result = async {
  def url = "http://example.com/movies"
  def response = await fetch(url) : list(Movie)

  return response \take(10)
}

---
# Option/Result chaining

The ErrorWorkflow context type provides a `try` keyword that causes the rest of the function to 
be skipped if the expression under the keyword returns an error

---

def getCustomer(customerID: int): Result(Customer, #customerNotFound) -> ...

def getLastOrder(customer: Customer): Result(Order, #orderNotFound) -> ...

spec Result(Money, #customerNotFound | #orderNotFound)
def lastOrderTotal = handle {
  def customer = try getCustomer(5)
  def order = try getLastOrder(customer)

  return order.total
}

---
#	Querying
---

def numSelected = checkboxes
  \filter { .isSelected }
  \count()


def totalSpendForCustomer = orders
  \filter { .customerId == 5 }
  \map { .total }
  \sum

--  You can do complicated queries such as joins, and even combine them
--  with 'do' to make superloops
customers 
  \join(orders) { customer, order -> order.customerId == customer.customerId }
  \filter { customer, order -> order.total > 100 and customer.age > 18 }
  \map { customer, order -> order.customerId, customer.name }
  \distinct
  \iter { customerId, name ->
      console?.log "{customer.name} (id -> {order.id}) is over 18 and has at least 1 order over $100"
  }

query { 
  def customer = from customers
  def order = from orders
  join order.customerId == customer.customerId
  where order.total > 100 and customer.age > 18
  distinct order.customerId, customer.name
} \iter { customerId, name ->
    console?.log "{name} (id -> {customerId}) is over 18 and has at least 1 order over $100"
}

--  Decompiles to:

query.from(customers, { customer ->
  query.from(orders, { order ->
    query.join({order.customerId == customer.Id}, {
      query.where({order.total > 100 and customer.age > 18}, {
        query.distinct({order.customerId, customer.name}, {
        })
      })
    })
  })
})

query {
    def student = from db.Student
    where student.studentId = 1
    select student
    trySingle
}

query {
    def student = from db.Student
    sortByDescending student.name
    select student
}

---
# DSL example: HTML builder
---

def html = (
  head = { (body: HtmlBuilder -> HtmlElement) -> HtmlElement }

  body = { (body: HtmlBuilder -> HtmlElement) -> HtmlElement }

  apply = { (block: [typeof(this)] () -> HtmlElement) -> HtmlElement }

  ...
)

def result = html {                                        
  head {                                               
      title { "HTML encoding with Nyx" }
  }
  body {                                               
      h1 { "HTML encoding with Nyx" }
      p {
          "this format can be used as an alternative markup to HTML"                
      }

      --  an element with attributes and text content
      a(href = "http://nyxlang.org") { "Nyx" }

      --  mixed content
      p {
          "This is some"
          b { "mixed" }
          "text. For more see the"
          a(href = "http://nyxlang.org") {
              "Nyx"
          }
          "project"
      }
      p {
          "some text"
          ul {
              for 1..5 | i ->
                  li { "{i} * 2 = {i * 2}" }
          }
      }
  }
}

---

Another kind of workflow keyword is one that takes two higher-order functions, the first usually representing some kind of 
condition and the second representing the continuation

---

def process() ->
	contract {
		mut count = 0

		ensures count >= 0	

    -- do stuff
	}

-- desugars to:

def process() ->
  contract.apply({ builder ->
    mut count = 0

    builder.ensures({ count >= 0 }, {
      -- do stuff
    })
  })

-- The same construct can be used in query building:

def usersWithLongNames = query {
  def user = from users
  where user.name.length > 10
  select user
}

-- desugars to:

def usersWithLongNames = query({ queryBuilder ->
  queryBuilder.from(users, { user ->
    queryBuilder.where(user.name.length > 10, {
      queryBuilder.select(user)
    })
  })
})
