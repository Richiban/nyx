---
Dependent Types
===============

Nyx has limited support for dependent types, i.e. types that depend on values.

Nyx supports dependent types in the form of type predicates. 
A type predicate is a function that takes a value and returns a boolean; if the type predicate returns true, the value is considered to be of the type. 
If the type predicate returns false, the value is not considered to be of the type.

These type predicates can be thought of as compile-time validation functions.

---

---
Imagine a fairly common scenario: you have a function that takes a string, and you want to ensure that the string is a valid email address.
In your library you have a function that returns true if the string is a valid email address, and false otherwise:

---

def isValidEmail(s) ->
  s.contains("@") && s.contains(".")



---
The problem is that whenever you write a function that takes a string, you don't know whether you have to check that the string is a valid email address. 

Has the string already been checked? In all possible code paths?

Many languages support the concept of a "newtype", i.e. a type alias that is "opaque" to its underlying type.

---

type Email = s: string where isValidEmail(s)

def sendEmail(email: Email) -> 
  ...

def address = "foo"

sendEmail(address) -- error: "foo" has not been through the `isValidEmail` check

if isValidEmail(address) ->
  sendEmail(address) -- ok

--	-- Dependent types and provability --

-- 	Types can be refined to allow only certain values

--  They can be used in type aliases:
type Nat = n: int where n >= 0

--  Or in function signatures:
spec (n: int) -> int where n >= 0
rec factorial | 0 -> 1
              | n -> n * factorial (n - 1)

spec (n: nat) -> y: int where x >= 0, y >= 1
rec factorial2(n) ->
    if n = 0 -> 1
    else -> n * factorial2 (n - 1)


def x = -1
  
println(factorial(x)) 	--	Compiler error -> "Type restriction failure -> `int x` has not been shown to satisfy `x >= 0`"

type Nat = x: int where x >= 0

spec a: number -> type
type OrderedPair(a) = (x: a, y: a) where x < y

spec (int, lower: int, upper: int) -> ret: int where lower <= ret <= upper
def clamp(x, lower, upper) -> 
  if | x < lower -> lower
     | x > upper -> upper
     | else -> x


spec (x: int, y: int) -> z: int
  where (z == x or z == y) 
    and (z >= x and z >= y)
def max(x, y) -> if x > y -> x else -> y

  
  