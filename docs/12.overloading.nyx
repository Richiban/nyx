
--  Similar to Typescript, Nyx doesn't support overloading but it does support multiple call signatures on a single function
--  In this way the return type of the function depends on the types passed in

spec | (string, #read) -> ReadableFile
     | (string, #readwrite) -> WriteableFile
def open(filename, mode) -> 
  ...


--  This is equivalent to, but easier to write than, 
spec (string, mode: #read | #readwrite) -> match mode
  | #read -> ReadableFile
  | #readwrite -> WriteableFile 
def open(filename, mode) -> 
  ...


--  -- Type functions --

--    Nyx allows type definitions to be essentially "type functions", i.e. types that calculate other types at compile-time.

type Elem(x) -> match x
  | String      -> Char
  | Array(t)    -> t
  | Iterable(t) -> t

--  or:

type Elem | String      -> Char
          | Array(t)    -> t
          | Iterable(t) -> t