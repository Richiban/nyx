{
	"name": "nyx",
	"scopeName": "source.nyx",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#tags"
		},
		{
			"include": "#double_tick"
		},
		{
			"include": "#definition"
		},
		{
			"include": "#abstract_definition"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#modules"
		},
		{
			"include": "#anonymous_functions"
		},
		{
			"include": "#records"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#workflows"
		},
		{
			"include": "#text"
		}
	],
	"repository": {
		"record_signature": {
			"patterns": [
				{
					"match": "[[:alpha:]0-9'`^_ ]+(=)([[:alpha:]0-9'`^_ ]+)",
					"captures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "variable.parameter.nyx"
						}
					}
				},
				{
					"begin": "({)",
					"end": "(})",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"match": "[[:alpha:]0-9'`^_ ]+(=)([[:alpha:]0-9'`^_ ]+)",
							"captures": {
								"1": {
									"name": "keyword.symbol.nyx"
								},
								"2": {
									"name": "variable.parameter.nyx"
								}
							}
						},
						{
							"include": "#record_signature"
						}
					]
				},
				{
					"include": "#keywords"
				}
			]
		},
		"record_signature": {
			"patterns": [
				{
					"match": "(([?[:alpha:]0-9'`^._ ]+))+",
					"captures": {
						"1": {
							"name": "entity.name.type.nyx"
						}
					}
				},
				{
					"begin": "(\\()",
					"end": "(\\))",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"match": "(([?[:alpha:]0-9'`^._ ]+))+",
							"captures": {
								"1": {
									"name": "entity.name.type.nyx"
								}
							}
						},
						{
							"include": "#record_signature"
						}
					]
				},
				{
					"include": "#keywords"
				}
			]
		},
		"anonymous_functions": {
			"patterns": [
				{
					"name": "function.anonymous",
					"begin": "\\b(fun)\\b",
					"end": "(->)",
					"beginCaptures": {
						"1": {
							"name": "keyword.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.arrow.nyx"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(\\()",
							"end": "\\s*(?=(->))",
							"beginCaptures": {
								"1": {
									"name": "keyword.symbol.nyx"
								}
							},
							"endCaptures": {
								"1": {
									"name": "keyword.symbol.arrow.nyx"
								}
							},
							"patterns": [
								{
									"include": "#member_declaration"
								}
							]
						},
						{
							"include": "#variables"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.nyx",
					"begin": "^(---)",
          "end": "^(---)",
					"beginCaptures": {
						"1": {
							"name": "comment.block.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "comment.block.nyx"
						}
					},
					"patterns": [
            {
              "include": "#comments"
            },
						{
							"include": "text.html.markdown"
						}
					]
				},
				{
					"name": "comment.line.double-slash.nyx",
					"match": "--[^\\-].+"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "keyword.symbol.nyx",
					"match": "\\(\\)"
				},
				{
					"name": "constant.numeric.float.nyx",
					"match": "\\b-?[0-9][0-9_]*((\\.([0-9][0-9_]*([eE][+-]??[0-9][0-9_]*)?)?)|([eE][+-]??[0-9][0-9_]*))"
				},
				{
					"name": "constant.numeric.integer.nativeint.nyx",
					"match": "\\b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))"
				},
				{
					"name": "constant.language.boolean.nyx",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.other.nyx",
					"match": "\\b(null|void)\\b"
				}
			]
		},
		"common_binding_definition": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#attributes"
				},
				{
					"begin": "(:)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "keyword.symbol.nyx"
						}
					},
					"end": "(\\)\\s*(([?[:alpha:]0-9'`^._ ]*)))",
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "entity.name.type.nyx"
						}
					},
					"patterns": [
						{
							"include": "#record_signature"
						}
					]
				},
				{
					"begin": "(:)\\s*(\\^[[:alpha:]0-9'._]+)\\s*(when)",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "entity.name.type.nyx"
						},
						"3": {
							"name": "keyword.nyx"
						}
					},
					"end": "(?=:)",
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"name": "keyword.nyx",
							"match": "\\b(and|when|or)\\b"
						},
						{
							"comment": "Because we first capture the keywords, we can capture what looks like a word and assume it's an entity definition",
							"match": "([[:alpha:]0-9'^._]+)",
							"captures": {
								"1": {
									"name": "entity.name.type.nyx"
								}
							}
						},
						{
							"name": "keyword.symbol.nyx",
							"match": "(\\(|\\))"
						}
					]
				},
				{
					"match": "(:)\\s*([?[:alpha:]0-9'`^._ ]+)",
					"captures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "entity.name.type.nyx"
						}
					}
				},
				{
					"match": "(->)\\s*(\\()?\\s*([?[:alpha:]0-9'`^._ ]+)*",
					"captures": {
						"1": {
							"name": "keyword.symbol.arrow.nyx"
						},
						"2": {
							"name": "keyword.symbol.nyx"
						},
						"3": {
							"name": "entity.name.type.nyx"
						}
					}
				},
				{
					"begin": "(\\*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "keyword.symbol.nyx"
						}
					},
					"end": "(\\)\\s*(([?[:alpha:]0-9'`^._ ]+))+)",
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "entity.name.type.nyx"
						}
					},
					"patterns": [
						{
							"include": "#record_signature"
						}
					]
				},
				{
					"begin": "(\\*)(\\s*([?[:alpha:]0-9'`^._ ]+))*",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "entity.name.type.nyx"
						}
					},
					"end": "(?==)|(?=\\))",
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"include": "#record_signature"
						}
					]
				},
				{
					"begin": "(<+(?![[:space:]]*\\)))",
					"beginComment": "The group (?![[:space:]]*\\) is for protection against overload operator. static member (<)",
					"end": "((?<!:)>|\\))",
					"endComment": "The group (?<!:) prevent us from stopping on :> when using SRTP synthax",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"include": "#generic_declaration"
						}
					]
				},
				{
					"include": "#anonymous_record_declaration"
				},
				{
					"begin": "({)",
					"end": "(})",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"include": "#record_signature"
						}
					]
				},
				{
					"include": "#definition"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#keywords"
				}
			]
		},
    "spec": {
      "patterns": [
        {
          "name": "spec.nyx",
          "begin": "\\b(spec)\\s+\\(\\)",
        }
      ]
    },
		"definition": {
			"patterns": [
				{
					"name": "binding.nyx",
					"begin": "(export)?\\b(mut|def|and|default|rec)\\s+([_[:alpha:]]([_[:alpha:]0-9\\._]+)*|``[_[:alpha:]]([_[:alpha:]0-9\\._`\\s]+|(?<=,)\\s)*)?",
					"end": "\\s*(=|->)",
					"beginCaptures": {
						"1": {
							"name": "keyword.nyx"
						},
						"2": {
							"name": "keyword.nyx"
						},
						"3": {
							"name": "support.function.attribute.nyx"
						},
						"4": {
							"name": "variable.nyx"
						}
					},
					"endCaptures": {
						"2": {
							"name": "keyword.nyx"
						},
						"3": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"include": "#common_binding_definition"
						}
					]
				},
				{
					"name": "binding.nyx",
					"begin": "\\b(use|use!|and|and!)\\s+(\\[[^-=]*\\]|[_[:alpha:]]([_[:alpha:]0-9\\._]+)*|``[_[:alpha:]]([_[:alpha:]0-9\\._`\\s]+|(?<=,)\\s)*)?",
					"end": "\\s*(=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"include": "#common_binding_definition"
						}
					]
				},
				{
					"name": "binding.nyx",
					"begin": "(?<=with|and)\\s*\\b((get|set)\\s*(?=\\())(\\[[^-=]*\\]|[_[:alpha:]]([_[:alpha:]0-9\\._]+)*|``[_[:alpha:]]([_[:alpha:]0-9\\._`\\s]+|(?<=,)\\s)*)?",
					"end": "\\s*(=|\\n+=|(?<=\\=))",
					"beginCaptures": {
						"4": {
							"name": "variable.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"include": "#common_binding_definition"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.nyx",
					"match": "\\b(def|default|type|trait|set|mut|where|constructor|spec|rec|as|try|using|export|import|module|or|and|is|pattern|not|spec)(?!')\\b"
				},
				{
					"name": "keyword.control",
					"match": "\\b(match|except|yield|with|if|then|else|for|in|return|try|finally|while|do|await|try|bind)(?!')\\b"
				},
				{
					"name": "keyword.symbol.arrow.nyx",
					"match": "(\\->|\\<\\-)"
				},
				{
					"name": "keyword.symbol.nyx",
					"match": "(&&&|\\|\\|\\||\\^\\^\\^|~~~|~\\+|~\\-|<<<|>>>|\\|>|:>|:\\?>|:|\\[|\\]|\\;|<>|=|@|\\|\\||&&|&|%|{|}|\\||_|\\.\\.|\\,|\\+|\\-|\\*|\\/|\\^|\\!|\\>|\\>\\=|\\>\\>|\\<|\\<\\=|\\(|\\)|\\<\\<)"
				}
			]
		},
		"modules": {
			"patterns": [
				{
					"name": "entity.name.section.nyx",
					"begin": "\\b(module)\\s+([[:alpha:]|``][[:alpha:]0-9'_. ]*)",
					"end": "(\\s?=|\\s|$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.nyx"
						},
						"2": {
							"name": "entity.name.section.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"name": "entity.name.section.nyx",
							"match": "(\\.)([A-Z][[:alpha:]0-9'_]*)",
							"captures": {
								"1": {
									"name": "punctuation.separator.namespace-reference.nyx"
								},
								"2": {
									"name": "entity.name.section.nyx"
								}
							}
						}
					]
				},
				{
					"name": "import.nyx",
					"begin": "\\b(import)\\s+([[:alpha:]|``][[:alpha:]0-9'_]*)(?=(\\.[A-Z][[:alpha:]0-9_]*)*)",
					"end": "(\\s|$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.nyx"
						},
						"2": {
							"name": "entity.name.section.nyx"
						}
					},
					"patterns": [
						{
							"name": "entity.name.section.nyx",
							"match": "(\\.)([[:alpha:]][[:alpha:]0-9'_]*)",
							"captures": {
								"1": {
									"name": "punctuation.separator.namespace-reference.nyx"
								},
								"2": {
									"name": "entity.name.section.nyx"
								}
							}
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"name": "namespace.alias.nyx",
					"begin": "^\\s*(module)\\s+([A-Z][[:alpha:]0-9'_]*)\\s*(=)\\s*([A-Z][[:alpha:]0-9'_]*)",
					"end": "(\\s|$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.nyx"
						},
						"2": {
							"name": "entity.name.type.namespace.nyx"
						},
						"3": {
							"name": "keyword.symbol.nyx"
						},
						"4": {
							"name": "entity.name.section.nyx"
						}
					},
					"patterns": [
						{
							"name": "entity.name.section.nyx",
							"match": "(\\.)([A-Z][[:alpha:]0-9'_]*)",
							"captures": {
								"1": {
									"name": "punctuation.separator.namespace-reference.nyx"
								},
								"2": {
									"name": "entity.name.section.nyx"
								}
							}
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.literal.nyx",
					"begin": "(?=[^\\\\])(@\")",
					"end": "(\")(?!\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.nyx"
						}
					},
					"patterns": [
						{
							"name": "constant.character.string.escape.nyx",
							"match": "\"(\")"
						}
					]
				},
				{
					"name": "string.quoted.triple.nyx",
					"begin": "(?=[^\\\\])(\"\"\")",
					"end": "(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.nyx"
						}
					},
					"patterns": [
						{
							"include": "#string_formatter"
						}
					]
				},
				{
					"name": "string.quoted.double.nyx",
					"begin": "(?=[^\\\\])(\")",
					"end": "(\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.nyx"
						}
					},
					"patterns": [
						{
							"name": "punctuation.separator.string.ignore-eol.nyx",
							"match": "\\\\$[ \\t]*"
						},
						{
							"name": "constant.character.string.escape.nyx",
							"match": "\\\\(['\"\\\\abfnrtv]|([01][0-9][0-9]|2[0-4][0-9]|25[0-5])|(x[0-9a-fA-F]{2})|(u[0-9a-fA-F]{4})|(U00(0[0-9a-fA-F]|10)[0-9a-fA-F]{4}))"
						},
						{
							"name": "invalid.illegal.character.string.nyx",
							"match": "\\\\(([0-9]{1,3})|(x[^\\s]{0,2})|(u[^\\s]{0,4})|(U[^\\s]{0,8})|[^\\s])"
						},
						{
							"include": "#string_formatter"
						}
					]
				}
			]
		},
		"string_formatter": {
			"patterns": [
				{
					"name": "entity.name.type.format.specifier.nyx",
					"match": "(%0?-?(\\d+)?((a|t)|(\\.\\d+)?(f|F|e|E|g|G|M)|(b|c|s|d|i|x|X|o|u)|(s|b|O)|(\\+?A)))",
					"captures": {
						"1": {
							"name": "keyword.format.specifier.nyx"
						}
					}
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "keyword.symbol.nyx",
					"match": "\\(\\)"
				},
				{
					"match": "(\\?{0,1})(``[[:alpha:]0-9'`^:,._ ]+``|(?!private|struct\\b)\\b[\\w[:alpha:]0-9'`<>^._ ]+)",
					"captures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "variable.parameter.nyx"
						}
					}
				}
			]
		},
		"common_declaration": {
			"patterns": [
				{
					"begin": "\\s*(->)\\s*([[:alpha:]0-9'`^._ ]+)(<)",
					"end": "(>)",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.arrow.nyx"
						},
						"2": {
							"name": "entity.name.type.nyx"
						},
						"3": {
							"name": "keyword.symbol.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"match": "([[:alpha:]0-9'`^._ ]+)",
							"captures": {
								"1": {
									"name": "entity.name.type.nyx"
								}
							}
						},
						{
							"include": "#keywords"
						}
					]
				},
				{
					"match": "\\s*(->)\\s*(?!with|get|set\\b)\\b([\\w0-9'`^._]+)",
					"captures": {
						"1": {
							"name": "keyword.symbol.arrow.nyx"
						},
						"2": {
							"name": "entity.name.type.nyx"
						}
					}
				},
				{
					"include": "#anonymous_record_declaration"
				},
				{
					"begin": "(\\?{0,1})([[:alpha:]0-9'`^._ ]+)\\s*(:)(\\s*([?[:alpha:]0-9'`^._ ]+)(<))",
					"end": "(>)",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						},
						"2": {
							"name": "variable.parameter.nyx"
						},
						"3": {
							"name": "keyword.symbol.nyx"
						},
						"4": {
							"name": "keyword.symbol.nyx"
						},
						"5": {
							"name": "entity.name.type.nyx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"match": "([[:alpha:]0-9'`^._ ]+)",
							"captures": {
								"1": {
									"name": "entity.name.type.nyx"
								}
							}
						},
						{
							"include": "#keywords"
						}
					]
				}
			]
		},
		"ticks": {
			"patterns": [
				{
					"name": "variable.other.binding.nyx",
					"match": "(`)([^`]*)(`)",
					"captures": {
						"1": {
							"name": "string.quoted.single.nyx"
						},
						"2": {
							"name": "variable.other.binding.nyx"
						},
						"3": {
							"name": "string.quoted.single.nyx"
						}
					}
				}
			]
		},
		"records": {
			"patterns": [
				{
					"name": "record.nyx",
					"begin": "\\b(type)[\\s]+(private|internal|public)?\\s*",
					"end": "\\s*((with)|((as)\\s+([[:alpha:]0-9']+))|(=)|[\\n=]|(\\(\\)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.nyx"
						},
						"2": {
							"name": "storage.modifier.nyx"
						}
					},
					"endCaptures": {
						"2": {
							"name": "keyword.nyx"
						},
						"3": {
							"name": "keyword.nyx"
						},
						"4": {
							"name": "keyword.nyx"
						},
						"5": {
							"name": "variable.parameter.nyx"
						},
						"6": {
							"name": "keyword.symbol.nyx"
						},
						"7": {
							"name": "keyword.symbol.nyx"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#attributes"
						},
						{
							"match": "([[:alpha:]0-9'^._]+|``[[:alpha:]0-9'`^:,._ ]+``)",
							"captures": {
								"1": {
									"name": "entity.name.type.nyx"
								}
							}
						},
						{
							"begin": "(<)",
							"end": "((?<!:)>)",
							"beginCaptures": {
								"1": {
									"name": "keyword.symbol.nyx"
								}
							},
							"endCaptures": {
								"1": {
									"name": "keyword.symbol.nyx"
								}
							},
							"patterns": [
								{
									"match": "(('|\\^)``[[:alpha:]0-9`^:,._ ]+``|('|\\^)[[:alpha:]0-9`^:._]+)",
									"captures": {
										"1": {
											"name": "entity.name.type.nyx"
										}
									}
								},
								{
									"name": "keyword.nyx",
									"match": "\\b(interface|with|abstract|and|when|or|not|struct|equality|comparison|unmanaged|delegate|enum)\\b"
								},
								{
									"begin": "(\\()",
									"end": "(\\))",
									"beginCaptures": {
										"1": {
											"name": "keyword.symbol.nyx"
										}
									},
									"endCaptures": {
										"1": {
											"name": "keyword.symbol.nyx"
										}
									},
									"patterns": [
										{
											"match": "(static member|member|new)",
											"captures": {
												"1": {
													"name": "keyword.nyx"
												}
											}
										},
										{
											"include": "#common_binding_definition"
										}
									]
								},
								{
									"match": "([\\w0-9'`^._]+)",
									"comments": "Here we need the \\w modifier in order to check that the words isn't blacklisted",
									"captures": {
										"1": {
											"name": "entity.name.type.nyx"
										}
									}
								},
								{
									"include": "#keywords"
								}
							]
						},
						{
							"match": "\\s*(private|internal|public)",
							"captures": {
								"1": {
									"name": "storage.modifier.nyx"
								}
							}
						},
						{
							"begin": "(\\()",
							"end": "\\s*(?=(=)|[\\n=]|(\\(\\))|(as))",
							"beginCaptures": {
								"1": {
									"name": "keyword.symbol.nyx"
								}
							},
							"endCaptures": {
								"1": {
									"name": "keyword.symbol.nyx"
								}
							},
							"patterns": [
								{
									"include": "#member_declaration"
								}
							]
						},
						{
							"include": "#keywords"
						}
					]
				}
			]
		},
		"record_declaration": {
			"patterns": [
				{
					"begin": "(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.symbol.nyx"
						}
					},
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(((mutable)\\s[[:alpha:]]+)|[[:alpha:]0-9'`<>^._]*)\\s*((?<!:):(?!:))\\s*",
							"beginCaptures": {
								"3": {
									"name": "keyword.nyx"
								},
								"4": {
									"name": "keyword.symbol.nyx"
								}
							},
							"end": "$|(;|\\})",
							"endCaptures": {
								"1": {
									"name": "keyword.symbol.nyx"
								}
							},
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"match": "([[:alpha:]0-9'`^_ ]+)",
									"captures": {
										"1": {
											"name": "entity.name.type.nyx"
										}
									}
								},
								{
									"include": "#keywords"
								}
							]
						},
						{
							"include": "#constants"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#chars"
						},
						{
							"include": "#double_tick"
						},
						{
							"include": "#definition"
						},
						{
							"include": "#attributes"
						},
						{
							"include": "#anonymous_functions"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#workflows"
						},
						{
							"include": "#text"
						}
					]
				}
			]
		},
		"workflows": {
			"patterns": [
				{
					"name": "workflow.nyx",
					"match": "\\b(async|seq|promise|task|maybe|asyncMaybe|controller|scope|application|pipeline)(?=\\s*\\{)",
					"captures": {
						"0": {
							"name": "keyword.nyx"
						}
					}
				}
			]
		},
		"chars": {
			"patterns": [
				{
					"name": "char.nyx",
					"match": "('\\\\?.')",
					"captures": {
						"1": {
							"name": "string.quoted.single.nyx"
						}
					}
				}
			]
		},
    "tags": {
      "patterns": [
        {
          "name": "tag.nyx",
          "match": "(#[a-zA-Z_0-9]+)",
          "captures": {
            "1": {
              "name": "support.type.nyx"
            }
          }
        }
      ]
    },
		"text": {
			"patterns": [
				{
					"name": "text.nyx",
					"match": "\\\\"
				}
			]
		}
	}
}