module lines

import:
    editor
    Enumerable { Enumerable }
    utils/lines as lineUtils
    selectionsAndRanges 
    io/SubjectIOBase 

export type LinePair =
    | (prev :: #none, current :: TextLine)
    | (prev :: TextLine,  current :: #none)
    | (prev :: TextLine,  current :: TextLine)

export type Direction = #backwards | #forwards
export type Change = #greaterThan | #lessThan

spec Change -> ((number, number) -> number)
def changeToDiff case #greaterThan: { x, y: x > y }
                 case #lessThan: { x, y: x < y }


spec (TextDocument, Position) -> TextLine
export def getNearestSignificantLine(document, position):
    def currentLine = document.lineAt(position.line)

    if currentLine.isEmptyOrWhitespace:
        def lines = lineUtils.iterLinesOutwards(document, position.line)

        for lines as backwardsLine, forwardsLine:
            if backwardsLine and !backwardsLine.isEmptyOrWhitespace:
                return backwardsLine

            if forwardsLine and !forwardsLine.isEmptyOrWhitespace:
                return forwardsLine

    return currentLine

spec TextLine -> TextLine
export def rangeWithoutIndentation(line):
    line.range.with {
        start = line.range.start.with {
            character = line.firstNonWhitespaceCharacterIndex
        }
    }

spec (Change, Direction, TextDocument, TextLine) -> TextLine | #none
export def getNextLineOfChangeOfIndentation(change, direction, document, currentLine):
    def diff = changeToDiff(change)
    def lines = iterLines(document, (
        startingPosition = currentLine.range.start,
        direction,
        currentInclusive = false,
    ))

    lines
    \ filter { !isEmptyOrWhitespace }
    \ filter { diff(firstNonWhitespaceCharacterIndex, currentLine.firstNonWhitespaceCharacterIndex) /= 0 }
    \ tryHead


spec(TextLine, TextLine) -> RelativeIndentation
export def getRelativeIndentation(startingLine, targetLine):
    if targetLine.isEmptyOrWhitespace:
        return #no_indentation

    if startingLine.firstNonWhitespaceCharacterIndex > targetLine.firstNonWhitespaceCharacterIndex:
        return #less_indentation

    if startingLine.firstNonWhitespaceCharacterIndex < targetLine.firstNonWhitespaceCharacterIndex:
        return #more_indentation

    return #same_indentation

spec TextDocument, IterationOptions -> Source(LinePair)
export def iterLinePairs(document, options):
    iterLines(document, (...options, currentInclusive = true))
    \ pairwise()
    \ map {
        case a, b if options.direction == #forwards: (prev = a, current = b)
        case a, b: (prev = b, current = a)
    }

spec TextDocument, Position, Direction -> TextLine | #none
export def getNextSignificantLine(document, position, direction):
    def lines = iterLines(document, (
        startingPosition = position,
        direction,
        currentInclusive = false,
    ))

    lines | tryFind(lineIsSignificant)


''  A "stop line" is one that is either blank or
    contains only punctuation
spec TextLine -> bool
export def lineIsStopLine(line):
    !/[a-zA-Z0-9]/.test(line.text)

spec TextLine -> bool
export def lineIsSignificant(line):
    !lineIsStopLine(line)

spec TextEditor, Position, common.Change, common.DirectionOrNearest -> ()
def moveToChangeOfIndentation(editor, cursorPosition, change, direction):
    if cursorPosition and editor.document:
        mut line :: TextLine? = ()
        def currentLine = editor.document.lineAt(cursorPosition.line)

        direction
        \ case #nearest:
            set line = getNearestLineOfChangeOfIndentation(
                editor.document,
                editor.document.lineAt(cursorPosition.line),
                change
            )
          case #backwards | #forwards:
            set line = lineUtils.getNextLineOfChangeOfIndentation(
                change,
                direction,
                editor.document,
                currentLine
            )

        if line:
            editor.selection = new Selection(
                line.range.start,
                line.range.start
            )

spec Direction -> (number -> number)
def directionToDelta case #forwards : { x: x + 1 }
                     case #backwards: { x: x - 1 }

export spec TextDocument, IterationOptions -> Source(TextLine)
def iterLines(document, options):
    def advance = directionToDelta(options.direction)
    mut currentLineNumber = wordRangeToPosition(
        options.startingPosition,
        options.direction
    ).line

    def withinBounds = {
        currentLineNumber >= 0 and
        (!options.bounds || currentLineNumber >= options.bounds.start.line) and
        (!options.bounds || currentLineNumber <= options.bounds.end.line) and
        currentLineNumber < document.lineCount
    }

    seq {
        while withinBounds():
            def newLine = document.lineAt(currentLineNumber)

            yield newLine

            currentLineNumber = advance(currentLineNumber)
    } | skip(if options.currentInclusive: 0 else: 1)

spec TextDocument, TextLine, common.Change -> TextLine
def getNearestLineOfChangeOfIndentation(document, currentLine, change):
    def diff = changeToDiff(change)

    for iterLinesOutwards(document, currentLine.lineNumber) as backwardsLine, forwardsLine:
        if forwardsLine and
           !forwardsLine.isEmptyOrWhitespace and
           diff(
                forwardsLine.firstNonWhitespaceCharacterIndex,
                currentLine.firstNonWhitespaceCharacterIndex
           ):
            return forwardsLine

        if backwardsLine and
           !backwardsLine.isEmptyOrWhitespace and
           diff(
                backwardsLine.firstNonWhitespaceCharacterIndex,
                currentLine.firstNonWhitespaceCharacterIndex
           ):
            return backwardsLine


export spec TextDocument, number -> Source(LinePair)
def iterLinesOutwards(document, currentLineNumber):
    mut forwardsPointer = currentLineNumber + 1
    mut backwardsPointer = currentLineNumber - 1    

    def forwardsPointerInBounds():
        forwardsPointer <= document.lineCount

    def backwardsPointerInBounds():
        backwardsPointer >= 0

    seq {
        while forwardsPointerInBounds() and backwardsPointerInBounds():
            def backwardsLine = 
                if backwardsPointerInBounds(): document.lineAt(backwardsPointer)
                else: #none

            def forwardsLine =
                if forwardsPointerInBounds(): document.lineAt(forwardsPointer)
                else: #none

            yield (backwardsLine, forwardsLine)

            forwardsPointer++
            backwardsPointer--
    }

export spec (list(QuickCommand), (label :: string, detail :: string)?) -> Async(QuickCommand | string | #none)
def quickCommandPicker(commands, freeEntryOptions):
    async { resolve, reject:
        type QuickPickItem = QuickPickItem & {
            quickKey :: common.Char?
            displayOnly :: true?
        }

        def quickPick = window.createQuickPick<QuickPickItem>()

        def freeEntryItems = list {
            if freeEntryOptions:
                yield (
                    label = ""
                    kind = QuickPickItemKind.Separator
                    displayOnly = true
                )
                yield (
                    label = freeEntryOptions.label
                    alwaysShow = true
                    detail = freeEntryOptions.detail
                    displayOnly = true
                )
        }

        quickPick.items = commands
            \ map { e:
                ( quickKey = e.quickKey
                  label = `[${e.quickKey}]`
                  description = e.label
                  execute = e.execute )
            }
            \ concat(freeEntryItems)

        quickPick.onDidHide {
            resolve()
            quickPick.dispose()
        }

        quickPick.onDidChangeValue { s:
            commands
            \ tryFind { quickKey == s }
            \ case #some, option:
                resolve(option)
                quickPick.dispose()
                return
              case #none if !freeEntryOptions: 
                set quickPick.value = ""
              case #none: ()
        }

        quickPick.onDidAccept {
            def selected = quickPick.selectedItems[0]

            if selected.displayOnly:
                if quickPick.value:
                    resolve(quickPick.value)
                else: return
            
            commands
            \ tryFind { quickKey == selected.quickKey }
            \ case #some, option:
                resolve(option)
                quickPick.dispose()
                return
              case #none:
                quickPick.dispose()
        }

        quickPick.show()
    }
