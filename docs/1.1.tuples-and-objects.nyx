---
  Objects
  =======

  Nyx has strong support for objects: tuples and records

---

def pair = (1, 2)

def point = (x = 1, y = 2)

---

  Note that the concepts of "tuples" and "records" are 
  unified in Nyx, meaning that the tuple ("a", "b") is actually equivalent to the 
  record (`0` = "a", `1` = "b")

---


---

  The comma isn't necessary if the properties are on separate lines

---

def point = (
  x = 1
  y = 2
)

---
  # Non-destructive mutation (copy-and-update)

  In a language where immutability is the default, it is almost required that there is a way to
  make a copy of a value with some of its properties changed. This is called "copy-and-update"
  or "non-destructive mutation". Nyx has two special syntactical forms for this:
    1. The `with` keyword
    2. The spread operator `...` 
  
  The important difference between these two forms is that the `with` keyword works on exactly one
  input object, and the result of the `with` expression will always be the same type as the 
  input object. The spread operator, meanwhile, can be used on any number of input objects
  and the resulting object may well be a different type from any of the input objects.

---

def x = (a = 1, b = 2)
def y = x with (a = 3)
def z = x with (d = 4) --  Error: the `with` keyword cannot be used to add new properties

def x = (a = 1, b = 2)
def y = (...x, a = 3) -- `y` is now (a = 3, b = 2)
def z = (...x, c = 4) -- `z` is now `(a = 1, b = 2, c = 4)`. Note the fact that a new property has been added

--  Unlike `with`, the spread operator can be used on multiple input objects, to create a mix of properties
def x = (a = 1, b = 2)
def y = (c = 3, d = 4)
def z = (...x, ...y) -- `z` is now `(a = 1, b = 2, c = 3, d = 4)`

--  Note that the order of the input objects is important. If two input objects have the same property,
--  the last one will be used.