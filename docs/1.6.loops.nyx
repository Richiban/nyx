---
Loops
=====
---

--	A simple n-times loop, without a variable
for 1..5 -> print("Hello")

--  A simple n-times loop, with a variable
for 1..5 | i -> print("Hello times {i}")

--  The syntax allows for immediate pattern matching on the loop variable:
for 1..5 | < 5 -> println("Ready...")
         | _   -> println("Go!")

data = [1, 2, 3]

--	Straightforward 'foreach' loop
for data | item -> println(item)

---
Behind the scenes for-loops are compiled into function calls. The variables that
can be declared are defined by the function being called. For example -> the type
<list> has a method "for" that takes a function that takes *two* parameters.
This means that the following are possible ->
---

--	Foreach loop with index variable as well using zip-like enumeration
def data = ["one", "two", "three"]
for data, 0.. | item, i ->
    print "Item number {i} is {item}"

--	The above code is exactly equivalent to the following ->
data -iteri { item, i ->  print "Item number {i} is {item}" }

--	Looping over a dictionary and getting both the key and value on each iteration ->
def data = map { "one" => "uno"; "two" => "dos"; "three" => "tres" }
for dict | key, value -> print "{key} => {value}"

--	The above code is exactly equivalent to the following ->
data -iter { key, value ->  print "{key} => {value}" }

--	If you want to ignore one of the variables available to you in the loop you can
    either -> simply omit the variable (if the variable you're omitting is at the end
    of the list of available variables) or use the wildcard '_' in its place. E.g.
for dict | _, value -> 
    print "I only care about {value} in this dictionary"

--	Note that, | with almost any statement in Nyx, a for loop is also an expression.
    This means that is can be used on the RHS of an assignment by 'selecting' a value.
    This brings us on to ->