---
Piping
======

Normally functions are called using the familiar brackets: `f(x)`

You can 'pipe' the argument to the function using a special character,
with the function first: `x \f(..)`. Writing function calls in this way
has the following benefits:
* it allows for convenient function chains, where each function takes 
  the output of the previous function as its first argument
* it can aid in readability, where functions are written in the order they're executed
* it allows for greater discoverability, where as soon as the piping 
  character is typed the editor can suggest all functions taking the 
  correct type as the first parameter
  
For example:

---

def getStreamFromInput: Request -> Stream(Byte) = ...
def getBytesFromStream: Stream(Byte) -> string = ...
def serialisePerson: string -> Person = ...

def personObj = request
  \getStreamFromInput
  \getBytesFromStream
  \serialisePerson

--  For functions that take more than one argument, the pipe will only apply to the first argument.

def add = { x, y -> x + y }
def result = 1
  \add(2)
  \add(3)


--  Functions can be fully qualified (e.g. `\List.map`) or, if the function you're piping to
--  is defined in the same module as the type of the value on the LHS of the pipe, you don't
--  need to fully qualify the function name. For example, the following two calls are equivalent:

def result = [1, 2, 3] \List.map { + 1 }

def result = [1, 2, 3] \map { + 1 }