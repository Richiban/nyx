---
Lambdas and higher-order functions
======================

> A higher-order function is a function where at least one of its parameters or return values is a function.

As a functional language, higher-order functions are a key feature of Nyx, and have strong compiler support.

It's possible to define a regular function using the `def` keyword and then pass it to another function as
an argument:
---

def add1(x) -> x + 1

def numbers = [1, 2, 3]

def biggerNumbers = numbers -map(add1)

---
However, it's more common to see an anonymous function (known as a lambda) passed directly to another function:
---

def biggerNumbers = numbers -map {x -> x + 1}

---
Note that the trailing lambda syntax means that the brackets (parentheses) are not necessary; the above form
is exactly equivalent to:
---

def biggerNumbers = numbers -map({x -> x + 1})



---
# Lambdas 
---

--  a lambda can be written in full:
def f = { (x: int): int -> x * 2 }

--  A shorthand lambda does two things:
--  * it allows you to omit the lambda parameter
--  * all members of the implicit parameter get lifted into scope (i.e. the function runs _int the context of_ its single parameter)

--  This allows:
def names = people.map { name }

--  As a shorthand for:
def names = people.map { p -> p.name }

--  Operators can also be used like this:
spec int -> int
def g = { + 2 }

--  Lambda arguments can also be pattern-matched:

things -map {
    | #nil -> 0
    | some(_) -> 1
} -sum()

--  This allows computation expression-style constructs:
def names = seq {
    for people | p ->
        p.name
}

--  as a rewriting of:
def names = seq({ builder ->
    for people | p ->
        builder.yield(p.name)	
})

--  There is builder functionality built in
@builderPattern
type Point = (x: int, y: int)

--  This generates a new `apply` function on the type, which takes a lambda parameter and runs
--  in the context of a mutable builder object. After the lamda has run the builder is used to
--  construct the final value.

--  Given the above `Point` class you can initialise it like this:
def p = Point {
    set x = 4
    set y = 5
}

--  The advantage of this over the standard constructor is that normal Nyx code can be written in
--  the lamda, such as to conditionally set properties in a way that is much nicer than a regular 
--  constructor call, especially where optional properties are present

@builderPattern 
type Options = (
    colour?: string
    textSize?: int
    bold?: bool
    italic?: bool
)

def options = Options {
    if error -> set colour = "red"
    if warning -> set colour = "yellow"
    if info -> 
        set colour = "blue"
        set italic = true
}


--  The braces desugar into a lambda passed to the auto-generated `apply` method on the type:
def p = Point.apply({ builder -> 
    set builder.x = 4
    set builder.y = 5
})


--  Since the `apply` method and its lambda parameter are marked as `inline`, the above desugars to:
def __<p-builder>__ = new Point.Builder()
set __<p-builder>__.x = 4
set __<p-builder>__.y = 5
def p: Point = __<p-builder>__.build()

