module richiban/semanticVersion/parser

type SemanticVersion =
  ( major: int
    minor: int 
    patch: int
    tag: string?
    buildMetadata: string? )

export def tryParse: string?, FormatProvider? -> Result(SemanticVersion, #invalidVersionNumber) 
  = result { value, formatProvider ->
    if value is #nil | #some("") ->
      throw #invalidVersionNumber

    mut major = 0
    mut minor = 0
    mut patch = 0
    mut tag : string? = #noTag
    mut buildMetadata : string? = #noMetadata

    mut index = 0

    -- Parse Major
    mut startIndex = index

    while index < value.Length and value[index] /= '.' ->
        set index++

    set major = tryParse(value.substring(startIndex, index - startIndex), formatProvider)
      except #err -> throw #invalidVersionNumber

    set index++ -- Move past the '.'

    -- Parse Minor
    set startIndex = index
    
    while index < value.Length and value[index] /= '.' ->
      set index++

    set minor = tryParse(value.substring(startIndex, index - startIndex), formatProvider)
      except #err -> throw #invalidVersionNumber

    set index++ -- Move past the '.'

    -- Parse Patch
    set startIndex = index

    while index < value.Length and value[index] /= '-' and value[index] /= '+' ->
      set index++

    set patch = tryParse(value.substring(startIndex, index - startIndex), formatProvider)
      except #err -> return #err(#invalidVersionNumber)

    -- Parse Tag (if present)
    if index < value.Length and value[index] == '-' ->
      set index++ -- Move past the '-'
      set startIndex = index
      
      while index < value.Length and value[index] /= '+' ->
        set index++

      set tag = value.substring(startIndex, index - startIndex)

    -- Parse Build Metadata (if present)
    if index < value.Length and value(index) == '+' ->
      set index++ -- Move past the '+'
      set startIndex = index

      while index < value.Length ->
        set index++
      
      set buildMetadata = value.substring(startIndex, index - startIndex)

    SemanticVersion(major, minor, patch, tag, buildMetadata)
  }